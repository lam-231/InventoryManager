using Microsoft.Extensions.DependencyInjection;
using InventoryManagement.Data;
using InventoryManagement.Interfaces;
using InventoryManagement.Repositories;
using Microsoft.EntityFrameworkCore;
using System.Windows;
using InventoryManagement.ViewModels;

namespace InventoryManagement
{
  public partial class App : Application
  {
    public static IServiceProvider? ServiceProvider { get; private set; }

    protected override void OnStartup(StartupEventArgs e)
    {
      try
      {
        var services = new ServiceCollection();

        // üîå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        services.AddDbContext<InventoryContext>(options =>
            options.UseSqlServer("Server=(localdb)\\MSSQLLocalDB;Database=NewInventoryDB;Trusted_Connection=True;TrustServerCertificate=True;"));

        // üß± –ë–∞–∑–æ–≤–∏–π generic —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
        services.AddScoped(typeof(IRepository<>), typeof(Repository<>));

        // üì¶ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó
        services.AddScoped<IProductRepository, ProductRepository>();
        services.AddScoped<ICategoryRepository, CategoryRepository>();
        services.AddScoped<ISupplierRepository, SupplierRepository>();
        
        services.AddScoped<IInventoryStatisticsService, InventoryStatisticsService>();
        // üì¶ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ViewModel –¥–ª—è DI
        services.AddTransient<CategoryViewModel>();
        services.AddTransient<ProductViewModel>();
        services.AddTransient<SupplierViewModel>();
        services.AddTransient<AnalyticsViewModel>();
        // ü™ü –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        services.AddTransient<MainWindow>();

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        ServiceProvider = services.BuildServiceProvider();

        // üîÅ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —á–µ—Ä–µ–∑ DI
        var mainWindow = ServiceProvider.GetRequiredService<MainWindow>();
        mainWindow.Show();
      }
      catch (Exception ex)
      {
        // –í–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        MessageBox.Show($"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {ex.Message}", "–ü–æ–º–∏–ª–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
        Shutdown(); // –ó–∞–∫—Ä–∏–≤–∞—î –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
      }

      base.OnStartup(e);
    }
  }
}
